{-# LANGUAGE OverloadedStrings #-}
module Hayoo.Indexer.Hoogle.ParseTest
  ( suite
  ) where


import           Data.Monoid                ((<>))
import qualified Data.Text                  as T
import qualified Hayoo.Core.DeclInfo        as DeclInfo
import qualified Hayoo.Indexer.Hoogle.Parse as Hoogle
import           Test.Hspec                 (Spec, describe, it)
import           Test.Hspec.Megaparsec      (shouldFailOn, shouldParse,
                                             shouldSucceedOn)
import qualified Text.Megaparsec            as M
import qualified Text.Megaparsec.Char       as M



-- SUITE


suite :: Spec
suite = do
  describe "preamble" $ do
    it "should parse preamble without comment" $ do
      M.parse Hoogle.preamble "" (testPreamble Nothing)
        `shouldParse` Hoogle.Package Nothing "servant" "0.12"

    it "should parse preamble with comment" $ do
      M.parse Hoogle.preamble "" (testPreamble (Just "-- | xx"))
        `shouldParse` Hoogle.Package (Just "xx") "servant" "0.12"

  describe "dataInfo" $ do
    it "should parse a simple data declaration" $ do
      M.parse (Hoogle.dataInfo (aesonDeclInfo Nothing)) "" simpleData
        `shouldParse` simpleDataResult

    it "should parse multiple simple data declarations" $ do
      M.parse (M.manyTill (M.space >> Hoogle.dataInfo (aesonDeclInfo Nothing)) M.eof) "" simpleData2
        `shouldParse` [simpleDataResult, simpleDataResult]

  describe "moduleInfo" $ do
    it "should parse moduleInfo from aeson" $ do
      M.parse (Hoogle.moduleInfo aesonPackage) "" testAesonModule
        `shouldParse` aesonDeclInfo Nothing

    it "should parse moduleInfo from aeson with comment" $ do
      M.parse (Hoogle.moduleInfo aesonPackage) "" testAesonModuleWithComment
        `shouldParse` aesonDeclInfo (Just "Efficiently and correctly parse a JSON string. The string must be\nencoded as UTF-8.")



-- HELPERS


testPreamble :: Maybe T.Text -> T.Text
testPreamble comment =
  T.intercalate "\n"
  [ "-- Hoogle documentation, generated by Haddock"
  , "-- See Hoogle, http://www.haskell.org/hoogle/"
  , ""
  , case comment of
      Nothing ->
        ""

      Just c ->
        "\n" <> c
  , "@package servant"
  , "@version 0.12"
  ]



-- AESON TEST


aesonDeclInfo :: Maybe T.Text -> DeclInfo.DeclInfo
aesonDeclInfo comment =
  DeclInfo.DeclInfo "Data.Aeson.Parser.Internal" "" "aeson" "" comment DeclInfo.Module "http://hackage.haskell.org/package/aeson/docs/Data-Aeson-Parser-Internal.html"


aesonPackage :: Hoogle.Package
aesonPackage =
  Hoogle.Package Nothing "aeson" "1.2.3.0"


testAesonModule :: T.Text
testAesonModule =
  T.intercalate "\n"
  [ "module Data.Aeson.Parser.Internal"
  ]


testAesonModuleWithComment :: T.Text
testAesonModuleWithComment =
  T.intercalate "\n"
  [ "-- | Efficiently and correctly parse a JSON string. The string must be"
  , "--   encoded as UTF-8."
  , "module Data.Aeson.Parser.Internal"
  ]


simpleData :: T.Text
simpleData =
  T.intercalate "\n"
  [ "-- | A type-level indicator that <tt>ToJSON1</tt> or <tt>FromJSON1</tt> is"
  , "--   being derived generically."
  , "data One"
  ]


simpleData2 :: T.Text
simpleData2 =
  T.intercalate "\n"
  [ simpleData
  , ""
  , simpleData
  ]


simpleDataResult :: DeclInfo.DeclInfo
simpleDataResult =
  DeclInfo.DeclInfo
    { DeclInfo.moduleName = "Data.Aeson.Parser.Internal"
    , DeclInfo.signature  = ""                          -- No signature for a module
    , DeclInfo.package    = "aeson"
    , DeclInfo.sourceURI  = ""
    , DeclInfo.declDescr  = Just "A type-level indicator that <tt>ToJSON1</tt> or <tt>FromJSON1</tt> is\nbeing derived generically."
    , DeclInfo.declType   = DeclInfo.Data
    , DeclInfo.docURI     = "http://hackage.haskell.org/package/aeson/docs/Data-Aeson-Parser-Internal.html#t:One"
    }
